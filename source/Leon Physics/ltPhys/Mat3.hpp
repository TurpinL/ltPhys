#ifndef LTPHYS_MAT3_H
#define LTPHYS_MAT3_H

#include "Scalar.hpp"
#include "Vec3.hpp"

namespace lt
{

////////////////////////////////////////////////////////////
///	@brief A class for manipulating row major 3x3 matrices.
///
/// @author Leon Turpin
/// @date August 2013
////////////////////////////////////////////////////////////
class Mat3
{
public:
	////////////////////////////////////////////////////////////
	/// @brief Default constructor.
	/// 
	/// Fills the matrix with junk data. 
	/// 
	////////////////////////////////////////////////////////////
	Mat3();
	
	////////////////////////////////////////////////////////////
	/// @brief Constructs a Mat3 with ecxplicitely defined 
	///  matrix elements
	/// 
	/// @param a row 1 column 1
	/// @param b row 1 column 2
	/// @param c row 1 column 3
	/// @param d row 2 column 1
	/// @param e row 2 column 2
	/// @param f etc
	///
	////////////////////////////////////////////////////////////
	Mat3(const Scalar& a, const Scalar& b, const Scalar& c, 
		 const Scalar& d, const Scalar& e, const Scalar& f, 
		 const Scalar& g, const Scalar& h, const Scalar& i );

	////////////////////////////////////////////////////////////
	/// @brief Constructs a Mat3 with data from an array.
	/// 
	/// @param data 3x3 matrix data
	///
	////////////////////////////////////////////////////////////
	Mat3(const Scalar data[9]); 

	////////////////////////////////////////////////////////////
	/// @brief Sets the diagonal values of the matrix.
	/// values 0, 3 & 8.
	/// 
	/// @param diagonals Values to assign to the diagonals
	///
	////////////////////////////////////////////////////////////
	Mat3(const Vec3& diagonals);

	////////////////////////////////////////////////////////////
	/// @brief Transforms a vector with the matrix.
	/// 
	/// @param rhs right operand
	/// 
	/// @return The transformed matrix.
	/// 
	////////////////////////////////////////////////////////////
	const Vec3 operator* (const Vec3 &rhs) const;

	////////////////////////////////////////////////////////////
	/// @brief Matrix multiplication of this matrix and the
	/// right operand
	///
	/// @param rhs Right operand
	///
	/// @return Result of matrix multiplication
	///
	////////////////////////////////////////////////////////////
	const Mat3 operator* (const Mat3 &rhs) const;

	////////////////////////////////////////////////////////////
	/// @brief Inverts this matrix.
	///
	/// @return A reference to this matrix.
	///
	////////////////////////////////////////////////////////////
	Mat3& invert();

	////////////////////////////////////////////////////////////
	/// @brief Returns the inverse of this matrix.
	///
	/// @param Inverse of this matrix.
	///
	////////////////////////////////////////////////////////////
	const Mat3 inverse() const;

	////////////////////////////////////////////////////////////
	/// @brief Transpose this materix.
	///
	/// @return A reference to this matrix.
	///
	////////////////////////////////////////////////////////////
	Mat3& transpose();

	////////////////////////////////////////////////////////////
	/// @brief Returns the transpose of this matrix.
	///
	/// @param Transpose of this matrix.
	///
	////////////////////////////////////////////////////////////
	const Mat3& transposed() const;

	////////////////////////////////////////////////////////////
	/// @brief Sets this matrix to an identity matrix.
	///
	/// @param Returns a reference to this matrix.
	///
	////////////////////////////////////////////////////////////
	Mat3& setIdentity(); 

	////////////////////////////////////////////////////////////
	/// @brief Gets the element of this matrix at the given index
	/// 
	/// @param index Index of the element to get.
	///
	/// @return The element at the index
	///
	////////////////////////////////////////////////////////////	
	const Scalar& Mat3::get(const int index) const;

	////////////////////////////////////////////////////////////
	/// @brief Access the matrix data with array subscription operator
	///
	/// @param Index of element to access
	///
	/// @return Reference to element at given index.
	///
	////////////////////////////////////////////////////////////	
	Scalar& operator[] (const int index);
 
private:
	Scalar m_data[9];
};

////////////////////////////////////////////////////////////			
/// @brief Constructs orthonormal basis vectors based on a given Y vector.
///
/// @param x calculated basis vector. Not read from in this function.
/// @param y A normalized vector that you want to base the orthonormal basis around.
/// @param z calculated basis vector. Not read from in this function.
///
////////////////////////////////////////////////////////////			 
void constructOrthonormalBasis(Vec3 &x, Vec3 &y, Vec3  &z);

////////////////////////////////////////////////////////////			
/// @brief Constructs orthonormal basis vectors based on a given Y vector.
///
/// @param y A normalized vector that you want to base the orthonormal basis around.
///
////////////////////////////////////////////////////////////	
const Mat3 constructOrthonormalBasis(const Vec3 &y);

} // namespace lt

#endif // LTPHYS_MAT3_H