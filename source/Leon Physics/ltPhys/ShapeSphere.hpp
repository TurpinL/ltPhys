#ifndef LTPHYS_SHAPESPHERE_H
#define LTPHYS_SHAPESPHERE_H

#include "CollisionShape.hpp"

namespace lt
{

////////////////////////////////////////////////////////////
///	@brief Stores information for a sphere collision shape.
///
/// @author Leon Turpin
/// @date February 2014
////////////////////////////////////////////////////////////
class ShapeSphere : public CollisionShape
{
public:
	////////////////////////////////////////////////////////////
	/// @brief default constructor
	///
	/// Creates a sphere with junk data radius
	///
	////////////////////////////////////////////////////////////
	ShapeSphere();

	////////////////////////////////////////////////////////////
	/// @brief Constructs a sphere shape from a radius
	///
	/// @param radius Radius of sphere shape.
	///
	////////////////////////////////////////////////////////////
	ShapeSphere(const Scalar& radius);

	////////////////////////////////////////////////////////////
	/// @brief Sets the radius of the sphere shape
	///
	/// @param radius Radius to set this sphere shape to
	///
	////////////////////////////////////////////////////////////
	void setRadius(const Scalar& radius);

	////////////////////////////////////////////////////////////
	/// @brief Get the radius of the sphere shape
	///
	/// @return Radius of the sphere shape
	///
	////////////////////////////////////////////////////////////
	const Scalar& getRadius() const;

	virtual ShapeType getShapeType() const { return SHAPE_SPHERE; }

private:
	Scalar m_radius;
};

} // namespace lt

#endif // LTPHYS_SHAPESPHERE_H
